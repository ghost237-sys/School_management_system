"""
Django settings for Analitica project.

Generated by 'django-admin startproject' using Django 4.2.20.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Prefer environment variable; fallback only for local dev
SECRET_KEY = os.environ.get(
    'DJANGO_SECRET_KEY',
    'django-insecure-*ok152u%==ocjk_1$lo4s$5j_z790d76%np&uk2m6znr(cvw55'
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJANGO_DEBUG', 'true').lower() == 'true'

# Comma-separated hostnames/IPs in env; safe defaults for local dev incl. ngrok
ALLOWED_HOSTS = [h.strip() for h in os.environ.get(
    'DJANGO_ALLOWED_HOSTS', 'localhost,127.0.0.1,::1,.ngrok-free.app'
).split(',') if h.strip()]


# Application definition

# Crispy Forms Bootstrap 5 settings
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core.apps.CoreConfig',
    'landing.apps.LandingConfig',
    'assistant.apps.AssistantConfig',
    'crispy_forms',
    'crispy_bootstrap5',
    'widget_tweaks',
    # Security / Authentication
    'axes',                 # Login lockout / rate limiting for auth
    'django_otp',           # One-Time Password framework
    'django_otp.plugins.otp_totp',  # TOTP devices (Google Authenticator, etc.)
    'two_factor',           # django-two-factor-auth
    'phonenumber_field',    # required by two-factor for phone validation
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # Render custom 404 template even in DEBUG
    'core.middleware.NotFoundTemplateMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    # Lock out abusive login attempts (must come after AuthenticationMiddleware)
    'axes.middleware.AxesMiddleware',
    # Idle session timeout
    'core.middleware.IdleSessionTimeoutMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Redirect plain 403 responses back to previous safe page
    'core.middleware.ForbiddenRedirectMiddleware',
]

ROOT_URLCONF = 'Analitica.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'core' / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.site_settings',
            ],
        },
    },
]

WSGI_APPLICATION = 'Analitica.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        # Reduce SQLITE_BUSY errors by allowing longer wait for locks
        'OPTIONS': {
            'timeout': 30,  # seconds
        },
        # Keep DB connections open briefly to reduce reconnect churn
        'CONN_MAX_AGE': 60,
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

# Use local timezone for Kenya by default
TIME_ZONE = 'Africa/Nairobi'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files (user uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# --- Security hardening ---
# Force HTTPS in production
SECURE_SSL_REDIRECT = os.environ.get('SECURE_SSL_REDIRECT', 'false').lower() == 'true'
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# HSTS (enable only when you're sure HTTPS is correctly set up)
SECURE_HSTS_SECONDS = int(os.environ.get('SECURE_HSTS_SECONDS', '0' if DEBUG else '31536000'))
SECURE_HSTS_INCLUDE_SUBDOMAINS = os.environ.get('SECURE_HSTS_INCLUDE_SUBDOMAINS', 'true').lower() == 'true'
SECURE_HSTS_PRELOAD = os.environ.get('SECURE_HSTS_PRELOAD', 'true').lower() == 'true'

# Cookies
SESSION_COOKIE_SECURE = os.environ.get('SESSION_COOKIE_SECURE', 'false' if DEBUG else 'true').lower() == 'true'
CSRF_COOKIE_SECURE = os.environ.get('CSRF_COOKIE_SECURE', 'false' if DEBUG else 'true').lower() == 'true'
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = os.environ.get('SESSION_COOKIE_SAMESITE', 'Lax')
CSRF_COOKIE_SAMESITE = os.environ.get('CSRF_COOKIE_SAMESITE', 'Lax')

# Session settings
# Absolute session lifetime (defaults to 8 hours); browser-close logout can be enabled via env
SESSION_COOKIE_AGE = int(os.environ.get('SESSION_COOKIE_AGE', str(8 * 60 * 60)))
SESSION_EXPIRE_AT_BROWSER_CLOSE = os.environ.get('SESSION_EXPIRE_AT_BROWSER_CLOSE', 'false').lower() == 'true'
# Update expiry on each request so active users stay logged in while idle users time out
SESSION_SAVE_EVERY_REQUEST = True

# Idle timeout in seconds (default 30 minutes). Enforced by IdleSessionTimeoutMiddleware.
SESSION_IDLE_TIMEOUT = int(os.environ.get('SESSION_IDLE_TIMEOUT', '1800'))

# Browser security headers
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = 'DENY'
SECURE_REFERRER_POLICY = os.environ.get('SECURE_REFERRER_POLICY', 'strict-origin-when-cross-origin')

# CSRF trusted origins (comma-separated). Include ngrok by default for dev.
_csrf_origins = os.environ.get('CSRF_TRUSTED_ORIGINS', '')
if _csrf_origins:
    CSRF_TRUSTED_ORIGINS = [o.strip() for o in _csrf_origins.split(',') if o.strip()]
else:
    CSRF_TRUSTED_ORIGINS = [
        'https://a1ef3ee75902.ngrok-free.app',
        'https://*.ngrok-free.app',
        'http://localhost',
        'http://127.0.0.1',
    ]
# Allow large multi-select submissions (e.g., finance messaging with many recipients)
# Default in Django is 1000; we raise it to accommodate bulk messaging posts safely.
DATA_UPLOAD_MAX_NUMBER_FIELDS = int(os.environ.get('DATA_UPLOAD_MAX_NUMBER_FIELDS', '20000'))
DATA_UPLOAD_MAX_MEMORY_SIZE = int(os.environ.get('DATA_UPLOAD_MAX_MEMORY_SIZE', '52428800'))  # 50 MB

# Email backend configuration
# Force SMTP backend to send real emails (override console backend)
EMAIL_BACKEND = os.environ.get('EMAIL_BACKEND', 'django.core.mail.backends.smtp.EmailBackend')

# SMTP Configuration
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', '587'))
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'true').lower() == 'true'
EMAIL_USE_SSL = os.environ.get('EMAIL_USE_SSL', 'false').lower() == 'true'
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', 'sevenforksprimaryschool@gmail.com')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', 'jwuw grhy epvt lqcf')  # Gmail App Password
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', EMAIL_HOST_USER)

# Email timeout and connection settings
EMAIL_TIMEOUT = int(os.environ.get('EMAIL_TIMEOUT', '60'))  # seconds
EMAIL_CONNECTION_TIMEOUT = int(os.environ.get('EMAIL_CONNECTION_TIMEOUT', '30'))  # seconds

# School branding used in outgoing messages
SCHOOL_NAME = os.environ.get('SCHOOL_NAME', 'Your School')

# SMS settings (Africa's Talking)
SMS_ENABLED = os.environ.get('SMS_ENABLED', 'true').lower() == 'true'
AFRICASTALKING_USERNAME = os.environ.get('AFRICASTALKING_USERNAME', '')
AFRICASTALKING_API_KEY = os.environ.get('AFRICASTALKING_API_KEY', '')
AFRICASTALKING_SENDER_ID = os.environ.get('AFRICASTALKING_SENDER_ID', '')  # empty in sandbox
DEFAULT_SMS_COUNTRY_CODE = os.environ.get('DEFAULT_SMS_COUNTRY_CODE', '254')

# Timetable notifications debounce window (seconds)
TIMETABLE_NOTIFY_COOLDOWN = int(os.environ.get('TIMETABLE_NOTIFY_COOLDOWN', '120'))

# M-Pesa (Daraja) configuration
MPESA_ENVIRONMENT = os.environ.get('MPESA_ENVIRONMENT', 'sandbox')  # 'sandbox' or 'production'
# Use provided env vars if set; otherwise fall back to values present in core/settings.py
MPESA_CONSUMER_KEY = os.environ.get('MPESA_CONSUMER_KEY', 'EXGFqWiPKTmwUrCGfKmHbUzj43Ikge7ekz5GVSbdzAk37L0j')
MPESA_CONSUMER_SECRET = os.environ.get('MPESA_CONSUMER_SECRET', 'lOjIKLlnhiHXxFRDkfkv9m8pm80ZJhNGQpcuuq3ktdyx9GAKk8pP8Aw4VlLRVnU1')

# C2B (PayBill) shortcode used for ledger and confirmation flows
# Use 174379 so sandbox C2B and STK share the same shortcode
MPESA_SHORTCODE = os.environ.get('MPESA_SHORTCODE', '174379')

# STK push uses a different BusinessShortCode in sandbox (typically 174379). Keep it configurable.
MPESA_STK_SHORTCODE = os.environ.get('MPESA_STK_SHORTCODE', os.environ.get('MPESA_SHORTCODE_STK', '174379'))
MPESA_STK_PASSKEY = os.environ.get('MPESA_STK_PASSKEY', os.environ.get('MPESA_PASSKEY_STK', 'bfb279f9aa9bdbcf158e97dd71a467cd2e0c893059b10f78e6b72ada1ed2c919'))

# Legacy/default passkey (used if STK-specific not provided)
MPESA_PASSKEY = os.environ.get('MPESA_PASSKEY', 'bfb279f9aa9bdbcf158e97dd71a467cd2e0c893059b10f78e6b72ada1ed2c919')

# Default AccountReference to use for STK push if not explicitly provided by the caller
# User requested account number 600986
MPESA_DEFAULT_ACCOUNT_REF = os.environ.get('MPESA_DEFAULT_ACCOUNT_REF', '600986')

# Public HTTPS URL for callbacks; must be reachable by Safaricom in production
MPESA_CALLBACK_URL = os.environ.get('MPESA_CALLBACK_URL', 'https://c23210ae8f66.ngrok-free.app/mpesa-callback/')
# Optional: C2B Validation and Confirmation URLs (non-STK PayBill flows)
MPESA_C2B_VALIDATION_URL = os.environ.get('MPESA_C2B_VALIDATION_URL', '')
MPESA_C2B_CONFIRMATION_URL = os.environ.get('MPESA_C2B_CONFIRMATION_URL', '')
# Accept multiple C2B shortcodes (comma-separated). Example: "600000,174379,400200"
# This allows testing across sandbox and live without editing code.
MPESA_ALLOWED_SHORTCODES = os.environ.get('MPESA_ALLOWED_SHORTCODES', '600000,174379,600996')
# Optional: Shared secret header for callback authentication (X-Mpesa-Secret)
MPESA_CALLBACK_SECRET = os.environ.get('MPESA_CALLBACK_SECRET', '')
# Auto-approve successful callbacks without waiting for STK Query (can be disabled via env)
MPESA_AUTO_APPROVE_ON_CALLBACK = os.environ.get('MPESA_AUTO_APPROVE_ON_CALLBACK', 'true').lower() == 'true'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL =  'core.User'

LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'dashboard'
LOGOUT_REDIRECT_URL = 'login'

# django-axes (login lockout) configuration
AXES_FAILURE_LIMIT = int(os.environ.get('AXES_FAILURE_LIMIT', '5'))
# Cooloff period for failed logins; configured as timedelta for compatibility
AXES_COOLOFF_TIME = timedelta(seconds=int(os.environ.get('AXES_COOLOFF_TIME', str(60 * 15))))
AXES_ONLY_USER_FAILURES = os.environ.get('AXES_ONLY_USER_FAILURES', 'false').lower() == 'true'
AXES_LOCK_OUT_AT_FAILURE = True
AXES_RESET_ON_SUCCESS = True
AXES_ENABLED = os.environ.get('AXES_ENABLED', 'true').lower() == 'true'


# Per-role concurrent session limits (can be overridden via environment)
ROLE_SESSION_LIMITS = {
    'admin': int(os.environ.get('LIMIT_SESSIONS_ADMIN', '2')),
    'teacher': int(os.environ.get('LIMIT_SESSIONS_TEACHER', '2')),
    'clerk': int(os.environ.get('LIMIT_SESSIONS_CLERK', '2')),
    'student': int(os.environ.get('LIMIT_SESSIONS_STUDENT', '3')),
    'parent': int(os.environ.get('LIMIT_SESSIONS_PARENT', '3')),
}




# --- Caching ---
# Use a persistent, file-based cache to ensure features that depend on cache
# (e.g., debounce locks in `core/signals.py`) work across server reloads.
# No external services required (works in dev and small deployments).
CACHE_DIR = BASE_DIR / 'cache'
try:
    os.makedirs(CACHE_DIR, exist_ok=True)
except Exception:
    # If the directory cannot be created, Django will raise on startup when
    # using FileBasedCache. We keep this guard to avoid breaking imports.
    pass

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': CACHE_DIR,
        'TIMEOUT': int(os.environ.get('DJANGO_CACHE_TIMEOUT', '600')),  # seconds
        'KEY_PREFIX': os.environ.get('DJANGO_CACHE_KEY_PREFIX', 'analitica'),
        'OPTIONS': {
            'MAX_ENTRIES': int(os.environ.get('DJANGO_CACHE_MAX_ENTRIES', '10000')),
        },
    }
}


# --- Celery (background tasks) ---
# Use Redis by default; override via environment if needed.
CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', 'redis://localhost:6379/1')
CELERY_TIMEZONE = TIME_ZONE
CELERY_ENABLE_UTC = False

# Reasonable task defaults
CELERY_TASK_ACKS_LATE = True
CELERY_WORKER_PREFETCH_MULTIPLIER = int(os.environ.get('CELERY_WORKER_PREFETCH_MULTIPLIER', '4'))
CELERY_TASK_ALWAYS_EAGER = os.environ.get('CELERY_TASK_ALWAYS_EAGER', 'false').lower() == 'true'  # handy for local testing without a worker

